export default AdsManager;
declare function AdsManager(adContainer: any): void;
declare class AdsManager {
    constructor(adContainer: any);
    /** @private */
    private _adContainer;
    _ownSlot: HTMLDivElement;
    _videoSlot: HTMLVideoElement;
    _slot: HTMLDivElement;
    EVENTS: {
        AdsManagerLoaded: string;
        AdStarted: string;
        AdStopped: string;
        AdSkipped: string;
        AdLoaded: string;
        AdLinearChange: string;
        AdSizeChange: string;
        AdExpandedChange: string;
        AdSkippableStateChange: string;
        AdDurationChange: string;
        AdRemainingTimeChange: string;
        AdVolumeChange: string;
        AdImpression: string;
        AdClickThru: string;
        AdInteraction: string;
        AdVideoStart: string;
        AdVideoFirstQuartile: string;
        AdVideoMidpoint: string;
        AdVideoThirdQuartile: string;
        AdVideoComplete: string;
        AdUserAcceptInvitation: string;
        AdUserMinimize: string;
        AdUserClose: string;
        AdPaused: string;
        AdPlaying: string;
        AdError: string;
        AdLog: string;
        AllAdsCompleted: string;
    };
    _eventCallbacks: {};
    _creativeEventCallbacks: {};
    _attributes: {
        width: number;
        height: number;
        viewMode: string;
        desiredBitrate: number;
        duration: number;
        remainingTime: number;
        currentTime: number;
        volume: number;
        version: string;
    };
    _quartileEvents: {
        event: string;
        value: number;
    }[];
    _nextQuartileIndex: number;
    _defaultEventCallbacks: {
        AdImpression: any;
        AdVideoStart: any;
        AdVideoFirstQuartile: any;
        AdVideoMidpoint: any;
        AdVideoThirdQuartile: any;
        AdVideoComplete: any;
    };
    _options: {
        autoplay: boolean;
        muted: boolean;
        vastLoadTimeout: number;
        loadVideoTimeout: number;
        withCredentials: boolean;
        wrapperLimit: number;
        resolveAll: boolean;
    };
    ERROR_CODES: {
        VAST_MALFORMED_RESPONSE: number;
        ADS_REQUEST_NETWORK_ERROR: number;
        FAILED_TO_REQUEST_ADS: number;
        UNKNOWN_AD_RESPONSE: number;
        VAST_ASSET_NOT_FOUND: number;
        VAST_EMPTY_RESPONSE: number;
        VAST_LINEAR_ASSET_MISMATCH: number;
        VAST_LOAD_TIMEOUT: number;
        VAST_MEDIA_LOAD_TIMEOUT: number;
        VIDEO_PLAY_ERROR: number;
        VPAID_ERROR: number;
    };
    ERROR_MESSAGES: {
        VAST_MALFORMED_RESPONSE: string;
        ADS_REQUEST_ERROR: string;
        ADS_REQUEST_NETWORK_ERROR: string;
        FAILED_TO_REQUEST_ADS: string;
        NO_ADS_FOUND: string;
        UNKNOWN_AD_RESPONSE: string;
        VAST_ASSET_NOT_FOUND: string;
        VAST_EMPTY_RESPONSE: string;
        VAST_LINEAR_ASSET_MISMATCH: string;
        VAST_LOAD_TIMEOUT: string;
        VAST_MEDIA_LOAD_TIMEOUT: string;
        VIDEO_PLAY_ERROR: string;
        VPAID_CREATIVE_ERROR: string;
    };
    ERRORS: {
        VAST_MALFORMED_RESPONSE: AdError;
        VAST_EMPTY_RESPONSE: AdError;
        VAST_ASSET_NOT_FOUND: AdError;
        VAST_LINEAR_ASSET_MISMATCH: AdError;
        VAST_LOAD_TIMEOUT: AdError;
        VAST_MEDIA_LOAD_TIMEOUT: AdError;
        VIDEO_PLAY_ERROR: AdError;
        VPAID_CREATIVE_ERROR: AdError;
    };
    _vastClient: any;
    _vastParser: any;
    _vastTracker: any;
    _ad: any;
    _adPod: any;
    _isAdPod: boolean;
    _creative: any;
    _mediaFiles: any;
    _mediaFileIndex: number;
    _mediaFile: any;
    _isVPAID: boolean;
    _vpaidIframe: HTMLIFrameElement;
    _vpaidCreative: any;
    _vastMediaLoadTimer: NodeJS.Timeout;
    _vpaidProgressTimer: NodeJS.Timer;
    _requestId: number;
    _handleLoadCreativeMessage: any;
    _handleSlotClick: any;
    _handleVideoSlotError: any;
    _handleVideoSlotCanPlay: any;
    _handleVideoSlotVolumeChange: any;
    _handleVideoSlotTimeUpdate: any;
    _handleVideoSlotLoadedMetaData: any;
    _handleVideoSlotEnded: any;
    MIN_VPAID_VERSION: number;
    _hasLoaded: boolean;
    _hasError: boolean;
    _hasImpression: boolean;
    _hasStarted: boolean;
    _isDestroyed: boolean;
    createOwnSlot(): void;
    removeSlot(): void;
    showSlot(): void;
    hideSlot(): void;
    resizeSlot(width: any, height: any): void;
    createVideoSlot(): void;
    createSlot(): void;
    hideVideoSlot(): void;
    showVideoSlot(): void;
    showHideVideoSlot(): void;
    stopVASTMediaLoadTimeout(): void;
    startVASTMediaLoadTimeout(): void;
    updateVPAIDProgress(): void;
    startVPAIDProgress(): void;
    stopVPAIDProgress(): void;
    _callEvent(eventName: any): void;
    addEventListener(eventName: any, callback: any, context: any): void;
    removeEventListener(eventName: any): void;
    removeEventListeners(eventCallbacks: any): void;
    onAdsManagerLoaded(): void;
    onAdLoaded(): void;
    onAdDurationChange(): void;
    onAdSizeChange(): void;
    onAdStarted(): void;
    onAdVideoStart(): void;
    onAdStopped(): void;
    onAdSkipped(): void;
    onAdVolumeChange(): void;
    onAdImpression(): void;
    onAdClickThru(url: any, id: any, playerHandles: any): void;
    onAdVideoFirstQuartile(): void;
    onAdVideoMidpoint(): void;
    onAdVideoThirdQuartile(): void;
    onAdPaused(): void;
    onAdPlaying(): void;
    onAdVideoComplete(): void;
    onAllAdsCompleted(): void;
    onAdError(message: any): void;
    onAdLog(message: any): void;
    processVASTResponse(res: any): void;
    requestAds(vastUrl: any, options?: {}): void;
    canPlayVideoType(mimeType: any): boolean;
    supportsVideo(): boolean;
    supportsH264BaselineVideo(): false | CanPlayTypeResult;
    supportsOggTheoraVideo(): false | CanPlayTypeResult;
    supportsWebmVideo(): false | CanPlayTypeResult;
    supportsThreeGPVideo(): false | CanPlayTypeResult;
    handshakeVersion(version: any): any;
    _isCreativeFunctionInvokable(a: any): boolean;
    checkVPAIDInterface(a: any): {
        passed: boolean;
        missingInterfaces: string;
    };
    setCallbacksForCreative(eventCallbacks: any, context: any): void;
    removeCallbacksForCreative(eventCallbacks: any): void;
    creativeAssetLoaded(): void;
    handleLoadCreativeMessage(msg: any): void;
    loadCreativeAsset(fileURL: any): void;
    removeCreativeAsset(): void;
    _removeHandlers(): void;
    _abort(): void;
    isCreativeExists(): boolean;
    handleSlotClick(): void;
    handleVideoSlotError(): void;
    handleVideoSlotCanPlay(): void;
    handleVideoSlotVolumeChange(event: any): void;
    handleVideoSlotTimeUpdate(event: any): void;
    handleVideoSlotLoadedMetaData(event: any): void;
    handleVideoSlotEnded(): void;
    _processAd(isNext?: boolean): void;
    _nextAd(): void;
    init(width: any, height: any, viewMode: any, isNext?: boolean): void;
    start(): void;
    getDuration(): number;
    pause(): void;
    resume(): void;
    stop(): void;
    skip(): void;
    resize(width: any, height: any, viewMode: any): void;
    getVolume(): any;
    setVolume(volume: any): void;
    getRemainingTime(): any;
    collapse(): void;
    expand(): void;
    abort(): void;
    destroy(): void;
    isDestroyed(): boolean;
    getVersion(): string;
}
import AdError from './ad-error';
